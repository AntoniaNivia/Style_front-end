// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A flow to generate outfit suggestions using AI based on the user's wardrobe.
 *
 * - generateOutfit - A function that handles the outfit generation process.
 * - GenerateOutfitInput - The input type for the generateOutfit function.
 * - GenerateOutfitOutput - The return type for the generateOutfit function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateOutfitInputSchema = z.object({
  wardrobe: z.array(
    z.object({
      photoDataUri: z
        .string()
        .describe(
          "A photo of the clothing item, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
        ),
      type: z.string().describe('The type of clothing item (e.g., shirt, pants, dress).'),
      color: z.string().describe('The color of the clothing item.'),
      season: z.string().describe('The season the clothing item is suitable for.'),
      occasion: z.string().describe('The occasion the clothing item is suitable for.'),
      tags: z.array(z.string()).describe('Custom tags for the clothing item.'),
    })
  ).describe('The user\u2019s virtual wardrobe.'),
  userStyle: z.string().describe('The user\u2019s preferred style (e.g., casual, elegant, street).'),
  climate: z.string().describe('The current climate (e.g., hot, cold, rainy).'),
  occasion: z.string().describe('The occasion the outfit is for (e.g., party, work, casual).'),
  mannequinPreference: z.enum(['Woman', 'Man', 'Neutral']).describe('The user\u2019s preferred mannequin for outfit visualization.'),
});
export type GenerateOutfitInput = z.infer<typeof GenerateOutfitInputSchema>;

const GenerateOutfitOutputSchema = z.object({
  outfitSuggestion: z.array(
    z.object({
      photoDataUri: z
        .string()
        .describe(
          "A photo of the clothing item, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
        ),
      type: z.string().describe('The type of clothing item (e.g., shirt, pants, dress).'),
      description: z.string().describe('A description of the outfit item'),
    })
  ).describe('The AI-generated outfit suggestion.'),
  reasoning: z.string().describe('Explanation of why the AI made this suggestion'),
  mannequinPhotoDataUri: z
    .string()
    .describe(
      "A photo of the suggested outfit on a mannequin, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    )
    .optional(),
});
export type GenerateOutfitOutput = z.infer<typeof GenerateOutfitOutputSchema>;

export async function generateOutfit(input: GenerateOutfitInput): Promise<GenerateOutfitOutput> {
  return generateOutfitFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateOutfitPrompt',
  input: {schema: GenerateOutfitInputSchema},
  output: {schema: GenerateOutfitOutputSchema},
  prompt: `You are an AI fashion stylist. Given a user's wardrobe, their style preferences, the current climate, and the occasion, you will suggest an outfit.

Wardrobe:
{{#each wardrobe}}
- Type: {{this.type}}, Color: {{this.color}}, Season: {{this.season}}, Occasion: {{this.occasion}}, Tags: {{this.tags}}
{{/each}}

User Style: {{{userStyle}}}
Climate: {{{climate}}}
Occasion: {{{occasion}}}

You must choose items from the wardrobe to create a complete outfit that is appropriate for the user's style, the climate, and the occasion. Provide a reasoning for each item chosen. Return the outfitSuggestion as an array of items with photoDataUri, type and description.

Finally, create a visualization of the outfit on a {{{mannequinPreference}}} mannequin. Return the photo data URI of the mannequin wearing the outfit in the mannequinPhotoDataUri field. If you cannot create the mannequin visualization, leave the field empty.

Output a JSON object that follows the schema.
`, // Ensure Handlebars syntax is used correctly
  config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_ONLY_HIGH',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_NONE',
      },
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_LOW_AND_ABOVE',
      },
    ],
  },
});

const generateOutfitFlow = ai.defineFlow(
  {
    name: 'generateOutfitFlow',
    inputSchema: GenerateOutfitInputSchema,
    outputSchema: GenerateOutfitOutputSchema,
  },
  async input => {
    // Step 1: Call the prompt to get the outfit suggestion and reasoning
    const {output} = await prompt(input);

    if (!output) {
      throw new Error('No output from prompt');
    }

    // Step 2: Optionally generate the mannequin visualization
    if (input.mannequinPreference) {
      try {
        const mannequinPrompt = `Generate a photo of a ${input.mannequinPreference} mannequin wearing the following outfit: ${output.outfitSuggestion.map(item => item.type).join(', ')}.  The overall style is ${input.userStyle}, for a ${input.occasion} occasion.  The background should be simple and neutral.`;
        const {media} = await ai.generate({
          model: 'googleai/gemini-2.0-flash-preview-image-generation',
          prompt: mannequinPrompt,
          config: {
            responseModalities: ['TEXT', 'IMAGE'], // MUST provide both TEXT and IMAGE, IMAGE only won't work
          },
        });

        if (media?.url) {
          output.mannequinPhotoDataUri = media.url;
        }
      } catch (error) {
        console.error('Error generating mannequin image:', error);
        // If mannequin generation fails, don't block the entire flow, and return without the mannequin image
      }
    }

    return output;
  }
);

